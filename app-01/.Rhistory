# Table of Contents
1.  [Init libraries](#orgc23cca8)
2.  [Run All init Library scripts](#orgcf04a12)
3.  [Importing data](#orgbcb2698)
4.  [Processing data](#orga086228)
1.  [Product details](#orgc70290e)
1.  [Cropped table](#orgb8a9f13)
2.  [Number of entries with Vendor Product code](#orgafc5ff1)
2.  [Vendor table](#org2cccda1)
<a id="orgc23cca8"></a>
# Init libraries
library(easypackages)
Listing packages and loading
mypackages <- c("tidyverse", "readxl", "skimr")
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup>
<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">tidyverse</td>
</tr>
<tr>
<td class="org-left">readxl</td>
</tr>
</tbody>
</table>
libraries(mypackages)
<a id="orgcf04a12"></a>
# Run All init Library scripts
library(easypackages)
mypackages <- c("tidyverse", "readxl", "skimr")
libraries(mypackages)
<a id="orgbcb2698"></a>
# Importing data
# Importing product details
product_details_raw_tbl <-  read_csv("/media/sf_bgr_inventory_host/inFlow_ProductDetails.csv")  %>%
glimpse()
#Importing the vendor details
vendor_details_raw_tbl <- read_csv("/media/sf_bgr_inventory_host/inFlow_Vendor.csv")  %>% glimpse()
<a id="orga086228"></a>
# Processing data
<a id="orgc70290e"></a>
## Product details
<a id="orgb8a9f13"></a>
### Cropped table
Dropping unnecessary columns
product_details_cropped_tbl <- product_details_raw_tbl  %>%
select(Name, Category, Description, ItemType, VendorProductCode, Cost)  %>%
glimpse()
<a id="orgafc5ff1"></a>
### Number of entries with Vendor Product code ----
product_details_cropped_tbl  %>%
count(is.na(VendorProductCode))
<a id="org2cccda1"></a>
## Vendor table
vendor_details_cropped_tbl <- vendor_details_raw_tbl  %>%
select
# Init libraries
library(easypackages)
Listing packages and loading
mypackages <- c("tidyverse", "readxl", "skimr")
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<colgroup>
<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">tidyverse</td>
</tr>
<tr>
<td class="org-left">readxl</td>
</tr>
</tbody>
</table>
libraries(mypackages)
# Run All init Library scripts
library(easypackages)
mypackages <- c("tidyverse", "readxl", "skimr")
libraries(mypackages)
# Importing data
# Importing product details
product_details_raw_tbl <-  read_csv("/media/sf_bgr_inventory_host/inFlow_ProductDetails.csv")  %>%
glimpse()
#Importing the vendor details
vendor_details_raw_tbl <- read_csv("/media/sf_bgr_inventory_host/inFlow_Vendor.csv")  %>% glimpse()
# Processing data
## Product details
### Cropped table
Dropping unnecessary columns
product_details_cropped_tbl <- product_details_raw_tbl  %>%
select(Name, Category, Description, ItemType, VendorProductCode, Cost)  %>%
glimpse()
### Number of entries with Vendor Product code
product_details_cropped_tbl  %>%
count(is.na(VendorProductCode))
## Vendor table
vendor_details_cropped_tbl <- vendor_details_raw_tbl  %>%
select
View(vendor_details_raw_tbl)
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
library(shiny)
source('~/my_projects/shiny-exploration/app-01/app.R')
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
runApp("./app-01")
View(server)
View(server)
runApp("app-01")
runApp("~/my_projects/shiny-exploration/app-01")
runApp('my_projects/shiny-exploration/app-01')
runApp('my_projects/shiny-exploration/app-01')
runApp('my_projects/shiny-exploration/app-01')
runApp('my_projects/shiny-exploration/app-01')
runExample("01_hello")
runApp('my_projects/shiny-exploration/app-01')
runExample("01_hello")
runApp('~/my_projects/shiny-exploration/app-01')
runExample("01_hello")
runApp('~/my_projects/shiny-exploration/app-01')
runApp('my_projects/shiny-exploration/app-01')
runApp('my_projects/shiny-exploration/app-01')
runExample("01_hello")
runApp('my_projects/shiny-exploration/app-01')
runExample("01_hello")
runApp('my_projects/shiny-exploration/app-01')
runApp('my_projects/shiny-exploration/app-01')
runExample("01_hello")
runApp('~/my_projects/shiny-exploration/app-01')
