* Introduction

This book will serve as an exploration ground to build shiny apps from the ground-up.

* Resources

** Rstudio [[https://shiny.rstudio.com/tutorial/][link]]

Free video tutorials from Datacamp sponsored by Rstudio. There are links to advanced articles, as well as written lessons. Very good resource to get started with. 

* Written Shiny Tutorial - Rstudio

** DONE Lesson 1 
CLOSED: [2019-01-24 Thu 13:22]
*** Installing shiny

#+BEGIN_SRC R :session *R:shiny-exploration
install.packages("shiny")
#+END_SRC

*** Hello Shiny
#+BEGIN_SRC R :session *R:shiny-exploration
runExample("01_hello")
#+END_SRC

**** TODO app.r re-written

- Note taken on [2019-01-24 Thu 13:22] \\
  God knows what the error is. I have moved on and understood the concepts.
#+BEGIN_SRC R :session *R:shiny-exploration 
library(shiny)

## Defining a UI app
ui <- fluidPage(
    
    ## App title
    titlePanel("Hello World"),

    ## Sidebar layout with input and output definitions
    sidebarLayout(

        ## Sidebar panel for inputs
        sidebarPanel(

            ##Slider for number of bins
            sliderInput(
                inputID = "bins",
                label = "Number of bins",
                min = 5,
                max = 30,
                value = 30
            )
        ),

        ## main panel for displaying output

        mainPanel(
            
            ## Output histogram
            plotOutput(outputID = "distPlot")
        )
    )
)


## Defining the server object

server <- function(input, output) {

    ## histogram of old Faithful geyser data. This is in-built and can be called using faithful.
    ## Expression generated a histogram that is wrapped in a call to renderPlot to indicate:

    ## 1. It is reactive -- should be automatically re-executed when the input (input$bins) change.

    ## 2. Output type is a plot.

    output$distPlot <- renderPlot({

        x <- faithful$waiting
        bins <-  seq(min(x), max(x), length.out = input$bins +1 )

        hist(x , breaks = bins, col= "blue", border = "orange",
             xlab = "waitingtime : next eruption (minutes)",      
             main = "Histogram of waiting times") 
    })
    
}

## creating the shiny app
shinyApp(ui = ui, server = server)
#+END_SRC

**** app.r copied

#+BEGIN_SRC R :session *R:shiny-exploration :tangle ./app-01/app.R
library(shiny)

# Define UI for app that draws a histogram ----
ui <- fluidPage(

  # App title ----
  titlePanel("Hello Shiny!"),

  # Sidebar layout with input and output definitions ----
  sidebarLayout(

    # Sidebar panel for inputs ----
    sidebarPanel(

      # Input: Slider for the number of bins ----
      sliderInput(inputId = "bins",
                  label = "Number of bins:",
                  min = 1,
                  max = 50,
                  value = 30)

    ),

    # Main panel for displaying outputs ----
    mainPanel(

      # Output: Histogram ----
      plotOutput(outputId = "distPlot")

    )
  )
)

# Define server logic required to draw a histogram ----
server <- function(input, output) {

  # Histogram of the Old Faithful Geyser Data ----
  # with requested number of bins
  # This expression that generates a histogram is wrapped in a call
  # to renderPlot to indicate that:
  #
  # 1. It is "reactive" and therefore should be automatically
  #    re-executed when inputs (input$bins) change
  # 2. Its output type is a plot

  output$distPlot <- renderPlot({

    x    <- faithful$waiting
    bins <- seq(min(x), max(x), length.out = input$bins + 1)

    hist(x, breaks = bins, col = "#75AADB", border = "white",
         xlab = "Waiting time to next eruption (in mins)",
         main = "Histogram of waiting times")

    })

}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
#+END_SRC

** DONE Lesson 2
CLOSED: [2019-01-24 Thu 13:20]
*** starting with custom app

#+BEGIN_SRC R :session *R:shiny-exploration :tangle ./app-02/app.R
library(shiny)

## Define UI
ui  <- fluidPage(

    titlePanel("This is the title"),

    sidebarLayout(
        sidebarPanel("Hello panel",
                     h2("This is h2 title in the sidepanel")),
        mainPanel("main panel",
                  h1("Another title in h1", align = "center")
                  ),
#        position = "right"
    )

)
## Define server logic

server <- function(input, output){

    
}



## Run the app
shinyApp(ui = ui, server = server)
#+END_SRC
*** test app for formatting difference highlight

#+BEGIN_SRC R :session *R:shiny-exploration
library(shiny)

ui <- fluidPage(
  titlePanel("My Shiny App"),
  sidebarLayout(
    sidebarPanel(),
    mainPanel(
      p("p creates a paragraph of text."),
      p("A new p() command starts a new paragraph. Supply a style attribute to change the format of the entire paragraph.", style = "font-family: 'times'; font-si16pt"),
      strong("strong() makes bold text."),
      em("em() creates italicized (i.e, emphasized) text."),
      br(),
      code("code displays your text similar to computer code"),
      div("div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'style = color:blue' to div", style = "color:blue"),
      br(),
      p("span does the same thing as div, but it works with",
        span("groups of words", style = "color:blue"),
        "that appear inside a paragraph.")
    )
  )
) 


## Run the app
shinyApp(ui = ui, server = server)
#+END_SRC
*** testing knowledge 

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle ./app-02/app.R
library(shiny)

## Define UI
ui  <- fluidPage(
    titlePanel("My Shiny App"),

    sidebarLayout(
        sidebarPanel(h1("Installation"),
                     p("Shiny is available on CRAN, so you can install it the usual way using:"),
                     br(),
                     code('install.packages("shiny")'),
                     img(src="rstudio.png", height = 70, width = 200),
                     p("Shiny is a product of ", a("Rstudio",
                                                 href="http://www.shiny.rstudio.com"))
                     ),
        mainPanel()
    )
)


## Define server logic
server <- function(input, output){}



## Run the app
shinyApp(ui = ui, server = server)
#+END_SRC

#+RESULTS:

** TODO Lesson 3

