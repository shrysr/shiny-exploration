* Introduction

This repo will serve as a learning and exploration ground to build shiny apps from the ground-up. It will include references, notes and the scripts to reproduce the apps.

* Resources
Overall resources used to build these examples. 

** Rstudio documentation [[https://shiny.rstudio.com/tutorial/][link]]
Free video tutorials from Datacamp sponsored by Rstudio. There are links to advanced articles, as well as written tutorials. This is a good resource to get started. 

* Shiny Tutorials - Rstudio

Re-implementing [[https://shiny.rstudio.com/tutorial/][Rstudio's tutorials]] with minor tweaks and additional explorations in some areas.

** DONE Lesson 1
CLOSED: [2019-01-24 Thu 13:22]
*** Installing the shiny library

#+BEGIN_SRC R :session *R:shiny-exploration
install.packages("shiny")
#+END_SRC

*** Running in-built shiny examples 

#+BEGIN_SRC R :session *R:shiny-exploration
runExample("01_hello")
#+END_SRC

**** app.r copied

#+BEGIN_SRC R :session *R:shiny-exploration :tangle ./app-01/app.R
library(shiny)

# Define UI for app that draws a histogram ----
ui <- fluidPage(

  # App title ----
  titlePanel("Hello Shiny!"),

  # Sidebar layout with input and output definitions ----
  sidebarLayout(

    # Sidebar panel for inputs ----
    sidebarPanel(

      # Input: Slider for the number of bins ----
      sliderInput(inputId = "bins",
                  label = "Number of bins:",
                  min = 1,
                  max = 50,
                  value = 30)

    ),

    # Main panel for displaying outputs ----
    mainPanel(

      # Output: Histogram ----
      plotOutput(outputId = "distPlot")

    )
  )
)

# Define server logic required to draw a histogram ----
server <- function(input, output) {

  # Histogram of the Old Faithful Geyser Data ----
  # with requested number of bins
  # This expression that generates a histogram is wrapped in a call
  # to renderPlot to indicate that:
  #
  # 1. It is "reactive" and therefore should be automatically
  #    re-executed when inputs (input$bins) change
  # 2. Its output type is a plot

  output$distPlot <- renderPlot({

    x    <- faithful$waiting
    bins <- seq(min(x), max(x), length.out = input$bins + 1)

    hist(x, breaks = bins, col = "#75AADB", border = "white",
         xlab = "Waiting time to next eruption (in mins)",
         main = "Histogram of waiting times")

    })

}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
#+END_SRC

** DONE Lesson 2
CLOSED: [2019-01-24 Thu 13:20]
*** starting with custom app

#+BEGIN_SRC R :session *R:shiny-exploration :tangle ./app-02/app.R
library(shiny)

## Define UI
ui  <- fluidPage(

    titlePanel("This is the title"),

    sidebarLayout(
        sidebarPanel("Hello panel",
                     h2("This is h2 title in the sidepanel")),
        mainPanel("main panel",
                  h1("Another title in h1", align = "center")
                  ),
#        position = "right"
    )

)
## Define server logic

server <- function(input, output){

    
}



## Run the app
shinyApp(ui = ui, server = server)
#+END_SRC

*** test app for formatting difference highlight

#+BEGIN_SRC R :session *R:shiny-exploration
library(shiny)

ui <- fluidPage(
  titlePanel("My Shiny App"),
  sidebarLayout(
    sidebarPanel(),
    mainPanel(
      p("p creates a paragraph of text."),
      p("A new p() command starts a new paragraph. Supply a style attribute to change the format of the entire paragraph.", style = "font-family: 'times'; font-si16pt"),
      strong("strong() makes bold text."),
      em("em() creates italicized (i.e, emphasized) text."),
      br(),
      code("code displays your text similar to computer code"),
      div("div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'style = color:blue' to div", style = "color:blue"),
      br(),
      p("span does the same thing as div, but it works with",
        span("groups of words", style = "color:blue"),
        "that appear inside a paragraph.")
    )
  )
) 


## Run the app
shinyApp(ui = ui, server = server)
#+END_SRC

*** testing knowledge 

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle ./app-02/app.R
library(shiny)

## Define UI
ui  <- fluidPage(
    titlePanel("My Shiny App"),

    sidebarLayout(
        sidebarPanel(h1("Installation"),
                     p("Shiny is available on CRAN, so you can install it the usual way using:"),
                     br(),
                     code('install.packages("shiny")'),
                     img(src="rstudio.png", height = 70, width = 200),
                     p("Shiny is a product of ", a("Rstudio",
                                                 href="http://www.shiny.rstudio.com"))
                     ),
        mainPanel()
    )
)


## Define server logic
server <- function(input, output){}



## Run the app
shinyApp(ui = ui, server = server)
#+END_SRC

#+RESULTS:

** DONE Lesson 3 Multiple columns
CLOSED: [2019-01-28 Mon 09:46]
*** Re-implementing example

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle app-03/app.R
library(shiny)

## Define UI
ui  <- fluidPage(
  titlePanel("Basic widget exploration"),

  fluidRow(

    column(2,
           h3("buttons"),
           actionButton("action007", label ="Action"),
           br(),
           br(),
           submitButton("Submit")
           ),
    column(2,
           h3("Single Checkbox"),
           checkboxInput("checkbox", "Choice A", value = T)
           ),
    column(3,
           checkboxGroupInput("checkGroup",
                              h3("checkbox group"),
                              choices = list("Choice 1" = 1,
                                             "Choice 2" = 2,
                                             "Choice 3" = 3
                                             ),
                              selected = 1
                              )
           ),
    column(2,
           dateInput("date",
                     h3("date input"),
                     value = ""
                     )
           )
    
  ),
  ## Inserting another fluid row element
  fluidRow(

    column(2,
           radioButtons("radio",
                        h3("Radio Buttons"),
                        choices = list("choice 1" = 1,
                                       "choice 2" = 2,
                                       "Radio 3"  = 3
                                       ),
                        selected =1
                        )
           ),

    column(2,
           selectInput("select",
                       h3("Select box"),
                       choices = list("choice 1" = 1,
                                      "choice 2" = 2,
                                      "choice 3" = 3
                                      ),
                       selected = 1
                       )
           ),
    column(2,
           sliderInput("slider1",
                       h3("Sliders"),
                       min = 0,
                       max = 100,
                       value = 50
                       ),

           sliderInput("slider2",
                       h3("Another Slider"),
                       min = 50,
                       max = 200,
                       value = c(60,80)
                       )
           ),
    column(2,
           selectInput("selectbox1",
                     h3("select from drop down box"),
                     choices = list("choice 1" = 22,
                                    "choice 2" = 2,
                                    "choice fake 3" = 33                       
                                    ),
                     selected = ""
                     )
           )
    
  ),
  fluidRow(
    column(3,
           dateRangeInput("daterange",
                          h3("Date range input")
                          )
           ),

    column(3,
           fileInput("fileinput",
                     h3("Select File")
                     )
           ),

    column(3,
           numericInput("numinput",
                        h3("Enter numeric value"),
                        value = 10
                        )
           ),
    column(3,
           h3("help text"),
           helpText("Hello this is line one.",
                    "This is line 2..\n",
                    "This is line 3."
                    )
           )
  )
)


## Define server logic

server <- function(input, output){

  
}



## Run the app
shinyApp(ui = ui, server = server)
#+END_SRC

#+RESULTS:

*** Init censusVis task

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle app-04/app.R
library(shiny)

## Define UI
ui  <- fluidPage(
  titlePanel("censusViz"),

  sidebarLayout(
    sidebarPanel(
      helpText("Create demographic maps with information form the 2010 US Census"),
      selectInput("inputbox1",
                  h2("Choose variable to display:"),
                  choices = list("Percent White" = 1,
                                 "Percent Black" = 2,
                                 "Percent Hispanic" = 3,
                                 "Percent Asian" = 4
                                 ),
                  selected = ""
                  ),
      sliderInput("slider1",
                  h2("Range of interest:"),
                  min = 0,
                  max = 100,
                  value = c(0,100)
                  )
    ),
    mainPanel("")
  )
)


## Define server logic

server <- function(input, output){

    
}



## Run the app
shinyApp(ui = ui, server = server)


#+END_SRC

** DONE Lesson 4 : reactive ouput display
CLOSED: [2019-01-28 Mon 10:51]
*** reactive censusViz task

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle census-app/app.R
library("easypackages")
libraries("shiny", "dplyr", "stringr")

## Define UI
ui  <- fluidPage(
  titlePanel("censusViz"),

  sidebarLayout(
    sidebarPanel(
      helpText("Create demographic maps with information form the 2010 US Census"),
      selectInput("inputbox1",
                  h2("Choose variable to display:"),
                  choices = list("Percent White" ,
                                 "Percent Black",
                                 "Percent Hispanic",
                                 "Percent Asian"
                                ),
                  selected = ""
                  ),
      sliderInput("slider1",
                  h2("Range of interest:"),
                  min = 0,
                  max = 100,
                  value = c(0,100)
                  )
    ),
    mainPanel(h1("Reactive Output"),
              textOutput("selected_var"),
              textOutput("slider_range")
              )
  )
)


## Define server logic

server <- function(input, output){

  output$selected_var <- renderText({
    str_glue("Selected option is {input$inputbox1} ")
  })

  output$slider_range <- renderText({
    str_glue("Range selected from \n {input$slider1[1]} to {input$slider1[2]}")
  })
}



## Run the app
shinyApp(ui = ui, server = server)


#+END_SRC

*** Test: passing a list to the input choices

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle census-app/app.R
library("easypackages")
libraries("shiny", "dplyr", "stringr")

test_list = list("Percent White" ,
                 "Percent Black",
                 "Percent Hispanic",
                 "Percent Asian"
                 )
## Define UI
ui  <- fluidPage(
  titlePanel("censusViz"),

  sidebarLayout(
    sidebarPanel(
      helpText("Create demographic maps with information form the 2010 US Census"),
      selectInput("inputbox1",
                  h2("Choose variable to display:"),
                  choices = test_list,
                  selected = ""
                  ),
      sliderInput("slider1",
                  h2("Range of interest:"),
                  min = 0,
                  max = 100,
                  value = c(0,100)
                  )
    ),
    mainPanel(h1("Reactive Output"),
              textOutput("selected_var"),
              textOutput("slider_range")
              )
  )
)


## Define server logic

server <- function(input, output){

  output$selected_var <- renderText({
    str_glue("Selected option is {input$inputbox1} ")
  })

  output$slider_range <- renderText({
    str_glue("Range selected from \n {input$slider1[1]} to {input$slider1[2]}")
  })
}



## Run the app
shinyApp(ui = ui, server = server)


#+END_SRC

** DONE Lesson 5: more complex reactive output
CLOSED: [2019-01-28 Mon 13:30]
*** Testing the helpers.R script for a chloropleth map

#+BEGIN_SRC R :session *R:shiny-exploration*
library(easypackages)
libraries("maps", "mapproj")
source("./census-app-02/01_scripts/helpers.R")
counties  <- read_rds("./census-app-02/00_data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
#+END_SRC

#+RESULTS:
| 0.21281857787809 | 0.19002668659856 | -0.401840098661777 | 0.520483137251405 | -0.344832092682208 | 0.466189798223245 |
| 0.21281857787809 | 0.19002668659856 | -0.401840098661777 | 0.520483137251405 | -0.344832092682208 | 0.439043128709165 |
| 0.21281857787809 | 0.19002668659856 | -0.401840098661777 | 0.520483137251405 | -0.344832092682208 | 0.411896459195085 |
| 0.21281857787809 | 0.19002668659856 | -0.401840098661777 | 0.520483137251405 | -0.344832092682208 | 0.384749789681005 |
| 0.21281857787809 | 0.19002668659856 | -0.401840098661777 | 0.520483137251405 | -0.344832092682208 | 0.357603120166925 |

*** Setting up chloropleth output in shiny app
Using the dataset =counties.rds= collected with the =Uscensus2010= R package. [[http://shiny.rstudio.com/tutorial/written-tutorial/lesson5/census-app/data/counties.rds][Download link]].

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle census-app-02/app.R
library("easypackages")
libraries("shiny", "dplyr", "stringr", "readr", "maps", "mapproj")


## Reading the counties dataset and glimpsing
source("helpers.R")
counties <- read_rds("./00_data/counties.rds")
counties %>% glimpse()

## Define UI
ui  <- fluidPage(
  titlePanel("censusViz"),

  sidebarLayout(
    sidebarPanel(
      helpText("Create demographic maps with information form the 2010 US Census"),
      selectInput("inputbox1",
                  h2("Choose variable to display:"),
                  choices = list("Percent White" ,
                                 "Percent Black",
                                 "Percent Hispanic",
                                 "Percent Asian"
                                ),
                  selected = ""
                  ),
      sliderInput("slider1",
                  h2("Range of interest:"),
                  min = 0,
                  max = 100,
                  value = c(0,100)
                  )
    ),
    mainPanel(h1("Reactive Output"),
              textOutput("selected_var"),
              textOutput("slider_range"),
              plotOutput("map")
              )
  )
)

## Define server logic
server <- function(input, output){

  output$selected_var <- renderText({
    str_glue("Selected option is {input$inputbox1} ")
  })

  output$slider_range <- renderText({
    str_glue("Range selected from \n {input$slider1[1]} to {input$slider1[2]}")
  })

  output$map  <- renderPlot({

    arg_list  <-  switch(input$inputbox1,
                         "Percent White" = list(counties$white, "darkgreen","% White population"),
                         "Percent Black" = list(counties$black, "black","% Black population"),
                         "Percent Asian" = list(counties$asian, "darkorange","% Asian population"),
                         "Percent Hispanic" = list(counties$hispanic, "pink","% Hispanic population"),
                         )
    
    arg_list$max = input$slider1[2]
    arg_list$min = input$slider1[1]

    do.call(percent_map,arg_list)
    
  })
}



## Run the app
shinyApp(ui = ui, server = server)


#+END_SRC 

** TODO Lesson 6: stockVis app

* Recreating and Expanding inbuilt examples 
:PROPERTIES:
:CREATED:  <2019-01-29 Tue 07:19>
:END:
** Eg 1 Hello Shiny

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle ./hello-shiny/app.R
library(shiny)

## Define UI
ui  <- fluidPage(
  titlePanel("Hello Shiny"),

  sidebarLayout(
    sidebarPanel(
      sliderInput("slider1",
                  label = "Number of Bins",
                  min = 1,
                  max = 50,
                  value = 20
                  )
    ),
      mainPanel("",
                plotOutput("histplot")
                )
  )
)


## Define server logic

server <- function(input, output){

  output$histplot <- renderPlot({

    dataset <- faithful$waiting
    bins <- seq(min(dataset), max(dataset), length.out = input$slider1 +1)

    hist(dataset, breaks = bins, col = "blue", border = "white",
         xlab = "Waiting time to next eruption(mins)",
         main = "Histogram of waiting times"
         )
  })
    
}

## Run the app
shinyApp(ui = ui, server = server)
#+END_SRC

** DONE Eg 2 Shiny text
CLOSED: [2019-01-29 Tue 08:21]

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle ./shiny-text-eg2/app.R
library(shiny)
library(tidyverse)

## Define UI
ui  <- fluidPage(
  titlePanel("Shiny text"),

  sidebarLayout(
    sidebarPanel(
      selectInput("dataset_choice",
                  label = "Choose a dataset",
                  choices = c("rock", "diamonds", "cars"),
                  #value = ""
                  ),
      numericInput("observation_number",
                   label = "Choose number of observations to display",
                   value = 10
                   )
    ),
    mainPanel(

      verbatimTextOutput("summary"),

      tableOutput("view")
    )
  )
)


## Define server logic

server <- function(input, output){

  datasetInput <- reactive({
    switch(input$dataset_choice,
           "rock" = rock,
           "diamonds"  = diamonds,
           "cars"   = cars
           )
  })

  output$summary <- renderPrint({
    datasetInput() %>% summary()
  })

  output$view <- renderTable({
    datasetInput() %>% head(n = input$observation_number)
  })
}



## Run the app
shinyApp(ui = ui, server = server)
#+END_SRC
*** DONE Base Example

** TODO Eg 6 - tabsets

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle ./tabsets-eg-6/app.R
library(shiny)
library(shinythemes)

## Define UI
ui  <- fluidPage(
  themeSelector(),
  titlePanel("Using tabsets"),
  
  sidebarLayout(
    sidebarPanel(
      radioButtons("dist_type",
                   "Distribution type",
                   choices = c("Normal" = "norm",
                               "Uniform" = "unif",
                               "Log-normal" = "lnorm",
                               "Exponential" = "exp"
                               )
                   ),
      sliderInput("slider1",
                  label = "Number of observations", 
                  min = 1,
                  max = 1000,
                  value = 500
                  )
    ),

    mainPanel(

      tabsetPanel(type = "tabs",
                  tabPanel(title = "Plot", plotOutput("plot1")),
                  tabPanel(title = "Summary", verbatimTextOutput("vbto1_summary")),
                  tabPanel(title = "Table", tableOutput("tabl1"))
                  )
    )
  )       
)


## Define server logic

server <- function(input, output){
  d <- reactive({
    dist <- switch(input$dist_type,
           norm = rnorm,
           unif = runif,
           lnorm = rlnorm,
           exp = exp
#           rnorm
           )

    dist(input$slider1)
  })

  output$plot1 <- renderPlot({
    dist <- input$dist_type
    n <- input$slider1

    hist(d(),
         main = paste("r", dist, "(", n, ")", sep = ""),
         col = "blue", border = "white")
  })

  output$vbto1_summary <- renderText({
    summary(d())
  })

  output$tabl1 <- renderTable({
    d()
  })
}

## Run the app
shinyApp(ui = ui, server = server)

#+END_SRC

* Dataset exploration app
** Layout experiments 

- Note taken on [2019-02-05 Tue 09:20] \\
  Appears that the sidepanel and mainpanel concepts cannot be used with =fluidRow()= as subcomponents. Instead, it is possible to use only =fluidRow()= to partition the page, and use it to create individual rows within a column. Perhaps this is more flexible in the long run.

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle ./dataset-explorer/app.R
library("easypackages")
libraries("shiny", "tidyverse")


## Define UI
ui  <- fluidPage(
    titlePanel("R's in-built Database explorer"),

  fluidRow(
    column(2,
           "Input",
           selectInput("dataset", 
                       label = "Select Dataset",
                       choices = ls("package:datasets")
                       )
           ),
    column(10,
           verbatimTextOutput("summary"),
           fluidRow(
             verbatimTextOutput("glimpse")
                         ))

    )
)       


## Define server logic

server <- function(input, output){

  output$summary = renderPrint({
    dataset <- get(input$dataset, "package:datasets", inherits = FALSE)
    summary(dataset)
  })

  output$table = renderTable({
    dataset <- get(input$dataset, "package:datasets", inherits = FALSE)
    dataset
  })

  output$glimpse = renderPrint({
    dataset <- get(input$dataset, "package:datasets", inherits = FALSE)
    glimpse(dataset)
  })
    
}



## Run the app
shinyApp(ui = ui, server = server)

#+END_SRC

** Shiny app around Rdatasets 
*** Introduction
*** Resources and References

1. [[https://stackoverflow.com/questions/33797666/how-do-i-get-a-list-of-built-in-data-sets-in-r][SO Discusion: List of in-built datasets in R]]
