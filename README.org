#+property: header-args :eval never-export
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
#+PROPERTY: mkdirp yes
* Introduction

This [[https://github.com/shrysr/shiny-exploration][repo]] will serve as a learning and exploration ground to build shiny apps from the ground-up. It will include references, notes and the scripts to reproduce the apps.

Planned Approach:
- Re-implement examples that I find from scratch, and in parallel explore other aspects and variations of the code.
- Apply the concepts learned to develop my own shiny apps.
- Tools used:
  - Emacs and Org-mode (source blocks in Org-babel) have been used to create this document and scripts, ala Literate programming.
  - Source blocks are tangled into respective app folders and RStudio was used to quickly run and reload apps for testing. (This is just more convenient than launching the web browser from Emacs.)

* References
The references below were instrumental in the learning procedure and also function as a source of inspiration.

Note: Relevant references and links are also placed alongside the code in each section.

1. Rstudio documentation [[https://shiny.rstudio.com/tutorial/][link]]
   - Free video tutorials from Datacamp sponsored by Rstudio. There are links to advanced articles, as well as written tutorials. This is a good resource to get started.
2. Sales revenue dashboard with Rshiny and ShinyDashboard [[https://datascienceplus.com/building-a-simple-sales-revenue-dashboard-with-r-shiny-shinydashboard/][link]]

* Shiny Tutorials - Rstudio [5/6]

Re-implementing [[https://shiny.rstudio.com/tutorial/][Rstudio's tutorials]] with minor tweaks and additional explorations in some areas.

** DONE Lesson 1
CLOSED: [2019-01-24 Thu 13:22]
*** App description and Readme
:PROPERTIES:
:ID:       135C28EA-A2CC-402D-BBBA-47D35B93F0BC
:END:

#+BEGIN_SRC txt :tangle ./app-01/DESCRIPTION
Title: Hello Shiny! - Lesson 1 of Rstudio tutorials
Author: Shreyas
AuthorUrl: http://www.rstudio.com/
License: MIT
DisplayMode: Showcase
Tags: getting-started
Type: Shiny
#+END_SRC

#+BEGIN_SRC markdown :tangle ./app-01/readme.md
This app is a reproduction of lesson 1 of the official Rstudio tutorials.
#+END_SRC

*** Installing the shiny library

#+BEGIN_SRC R :session *R:shiny-exploration
install.packages("shiny")
#+END_SRC

*** Running in-built shiny examples

#+BEGIN_SRC R :session *R:shiny-exploration
runExample("01_hello")
#+END_SRC

*** [[/app-01/][app-01]]
:PROPERTIES:
:ID:       0BFAA059-DF9C-43EE-999D-3476CDC8E805
:END:

#+BEGIN_SRC R :session *R:shiny-exploration :tangle ./app-01/app.R
library(shiny)

# Define UI for app that draws a histogram ----
ui <- fluidPage(

  # App title ----
  titlePanel("Hello Shiny!"),

  # Sidebar layout with input and output definitions ----
  sidebarLayout(

    # Sidebar panel for inputs ----
    sidebarPanel(

      # Input: Slider for the number of bins ----
      sliderInput(inputId = "bins",
                  label = "Number of bins:",
                  min = 1,
                  max = 50,
                  value = 30)

    ),

    # Main panel for displaying outputs ----
    mainPanel(

      # Output: Histogram ----
      plotOutput(outputId = "distPlot")

    )
  )
)

# Define server logic required to draw a histogram ----
server <- function(input, output) {

  # Histogram of the Old Faithful Geyser Data ----
  # with requested number of bins
  # This expression that generates a histogram is wrapped in a call
  # to renderPlot to indicate that:
  #
  # 1. It is "reactive" and therefore should be automatically
  #    re-executed when inputs (input$bins) change
  # 2. Its output type is a plot

  output$distPlot <- renderPlot({

    x    <- faithful$waiting
    bins <- seq(min(x), max(x), length.out = input$bins + 1)

    hist(x, breaks = bins, col = "#75AADB", border = "white",
         xlab = "Waiting time to next eruption (in mins)",
         main = "Histogram of waiting times")

    })

}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
#+END_SRC

** DONE Lesson 2
CLOSED: [2019-01-24 Thu 13:20]
*** Starting with custom app
:PROPERTIES:
:ID:       C28D2DED-58D7-47A6-8799-767A8E8FDC8B
:END:

#+BEGIN_SRC R :session *R:shiny-exploration :tangle ./app-02/app.R
library(shiny)

## Define UI
ui  <- fluidPage(

    titlePanel("This is the title"),

    sidebarLayout(
        sidebarPanel("Hello panel",
                     h2("This is h2 title in the sidepanel")),
        mainPanel("main panel",
                  h1("Another title in h1", align = "center")
                  ),
#        position = "right"
    )

)
## Define server logic

server <- function(input, output){


}



## Run the app
shinyApp(ui = ui, server = server)
#+END_SRC

*** Test app for formatting difference highlight

#+BEGIN_SRC R :session *R:shiny-exploration*
library(shiny)

ui <- fluidPage(
  titlePanel("My Shiny App"),
  sidebarLayout(
    sidebarPanel(),
    mainPanel(
      p("p creates a paragraph of text."),
      p("A new p() command starts a new paragraph. Supply a style attribute to change the format of the entire paragraph.", style = "font-family: 'times'; font-si16pt"),
      strong("strong() makes bold text."),
      em("em() creates italicized (i.e, emphasized) text."),
      br(),
      code("code displays your text similar to computer code"),
      div("div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'style = color:blue' to div", style = "color:blue"),
      br(),
      p("span does the same thing as div, but it works with",
        span("groups of words", style = "color:blue"),
        "that appear inside a paragraph.")
    )
  )
)


## Run the app
shinyApp(ui = ui, server = server)
#+END_SRC

*** Testing knowledge. [[/app-02/][See app-02]]
:PROPERTIES:
:ID:       5FE10AA0-1E81-48D9-85E9-8E782EB2E935
:END:

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle ./app-02/app.R
library(shiny)

## Define UI
ui  <- fluidPage(
    titlePanel("My Shiny App"),

    sidebarLayout(
        sidebarPanel(h1("Installation"),
                     p("Shiny is available on CRAN, so you can install it the usual way using:"),
                     br(),
                     code('install.packages("shiny")'),
                     img(src="rstudio.png", height = 70, width = 200),
                     p("Shiny is a product of ", a("Rstudio",
                                                 href="http://www.shiny.rstudio.com"))
                     ),
        mainPanel()
    )
)


## Define server logic
server <- function(input, output){}



## Run the app
shinyApp(ui = ui, server = server)
#+END_SRC

#+RESULTS:

** DONE Lesson 3 Multiple columns
CLOSED: [2019-01-28 Mon 09:46]
*** Re-implementing example. [[/app-03/][See app-03]]
:PROPERTIES:
:ID:       4DE740BB-E632-4013-BB0F-65BE0FBF4EB7
:END:

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle app-03/app.R
library(shiny)

## Define UI
ui  <- fluidPage(
  titlePanel("Basic widget exploration"),

  fluidRow(

    column(2,
           h3("buttons"),
           actionButton("action007", label ="Action"),
           br(),
           br(),
           submitButton("Submit")
           ),
    column(2,
           h3("Single Checkbox"),
           checkboxInput("checkbox", "Choice A", value = T)
           ),
    column(3,
           checkboxGroupInput("checkGroup",
                              h3("checkbox group"),
                              choices = list("Choice 1" = 1,
                                             "Choice 2" = 2,
                                             "Choice 3" = 3
                                             ),
                              selected = 1
                              )
           ),
    column(2,
           dateInput("date",
                     h3("date input"),
                     value = ""
                     )
           )

  ),
  ## Inserting another fluid row element
  fluidRow(

    column(2,
           radioButtons("radio",
                        h3("Radio Buttons"),
                        choices = list("choice 1" = 1,
                                       "choice 2" = 2,
                                       "Radio 3"  = 3
                                       ),
                        selected =1
                        )
           ),

    column(2,
           selectInput("select",
                       h3("Select box"),
                       choices = list("choice 1" = 1,
                                      "choice 2" = 2,
                                      "choice 3" = 3
                                      ),
                       selected = 1
                       )
           ),
    column(2,
           sliderInput("slider1",
                       h3("Sliders"),
                       min = 0,
                       max = 100,
                       value = 50
                       ),

           sliderInput("slider2",
                       h3("Another Slider"),
                       min = 50,
                       max = 200,
                       value = c(60,80)
                       )
           ),
    column(2,
           selectInput("selectbox1",
                     h3("select from drop down box"),
                     choices = list("choice 1" = 22,
                                    "choice 2" = 2,
                                    "choice fake 3" = 33
                                    ),
                     selected = ""
                     )
           )

  ),
  fluidRow(
    column(3,
           dateRangeInput("daterange",
                          h3("Date range input")
                          )
           ),

    column(3,
           fileInput("fileinput",
                     h3("Select File")
                     )
           ),

    column(3,
           numericInput("numinput",
                        h3("Enter numeric value"),
                        value = 10
                        )
           ),
    column(3,
           h3("help text"),
           helpText("Hello this is line one.",
                    "This is line 2..\n",
                    "This is line 3."
                    )
           )
  )
)


## Define server logic

server <- function(input, output){


}



## Run the app
shinyApp(ui = ui, server = server)
#+END_SRC

#+RESULTS:

*** Init censusVis task. [[/app-04/][See app-04]]
:PROPERTIES:
:ID:       8D7695A3-C7D1-46CB-9AD9-052227DC61BB
:END:

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle app-04/app.R
library(shiny)

## Define UI
ui  <- fluidPage(
  titlePanel("censusViz"),

  sidebarLayout(
    sidebarPanel(
      helpText("Create demographic maps with information form the 2010 US Census"),
      selectInput("inputbox1",
                  h2("Choose variable to display:"),
                  choices = list("Percent White" = 1,
                                 "Percent Black" = 2,
                                 "Percent Hispanic" = 3,
                                 "Percent Asian" = 4
                                 ),
                  selected = ""
                  ),
      sliderInput("slider1",
                  h2("Range of interest:"),
                  min = 0,
                  max = 100,
                  value = c(0,100)
                  )
    ),
    mainPanel("")
  )
)


## Define server logic

server <- function(input, output){


}



## Run the app
shinyApp(ui = ui, server = server)


#+END_SRC

** DONE Lesson 4 : reactive ouput display
CLOSED: [2019-01-28 Mon 10:51]
*** Reactive censusViz task. [[/census-app/][See census-app]]
:PROPERTIES:
:ID:       ee5090b3-e89b-4859-aa1f-25e340b47bf7
:END:

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle census-app/app.R
library("easypackages")
libraries("shiny", "dplyr", "stringr")

## Define UI
ui  <- fluidPage(
  titlePanel("censusViz"),

  sidebarLayout(
    sidebarPanel(
      helpText("Create demographic maps with information form the 2010 US Census"),
      selectInput("inputbox1",
                  h2("Choose variable to display:"),
                  choices = list("Percent White" ,
                                 "Percent Black",
                                 "Percent Hispanic",
                                 "Percent Asian"
                                ),
                  selected = ""
                  ),
      sliderInput("slider1",
                  h2("Range of interest:"),
                  min = 0,
                  max = 100,
                  value = c(0,100)
                  )
    ),
    mainPanel(h1("Reactive Output"),
              textOutput("selected_var"),
              textOutput("slider_range")
              )
  )
)


## Define server logic

server <- function(input, output){

  output$selected_var <- renderText({
    str_glue("Selected option is {input$inputbox1} ")
  })

  output$slider_range <- renderText({
    str_glue("Range selected from \n {input$slider1[1]} to {input$slider1[2]}")
  })
}



## Run the app
shinyApp(ui = ui, server = server)


#+END_SRC

*** Test: passing a list to the input choices
:PROPERTIES:
:ID:       D67D0D19-CF30-4157-A98C-BD44B317A69F
:END:

- Note taken on [2019-02-05 Tue 11:04] \\
  Testing to see if a list defined in a variable can be passed as choices. This is possible.

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle census-app/app.R
library("easypackages")
libraries("shiny", "dplyr", "stringr")

## List to pass into the input box choices
test_list = list("Percent White" ,
                 "Percent Black",
                 "Percent Hispanic",
                 "Percent Asian"
                 )
## Define UI
ui  <- fluidPage(
  titlePanel("censusViz"),

  sidebarLayout(
    sidebarPanel(
      helpText("Create demographic maps with information form the 2010 US Census"),
      selectInput("inputbox1",
                  h2("Choose variable to display:"),
                  choices = test_list,
                  selected = ""
                  ),
      sliderInput("slider1",
                  h2("Range of interest:"),
                  min = 0,
                  max = 100,
                  value = c(0,100)
                  )
    ),
    mainPanel(h1("Reactive Output"),
              textOutput("selected_var"),
              textOutput("slider_range")
              )
  )
)


## Define server logic

server <- function(input, output){

  output$selected_var <- renderText({
    str_glue("Selected option is {input$inputbox1} ")
  })

  output$slider_range <- renderText({
    str_glue("Range selected from \n {input$slider1[1]} to {input$slider1[2]}")
  })
}



## Run the app
shinyApp(ui = ui, server = server)


#+END_SRC

** DONE Lesson 5: more complex reactive output
CLOSED: [2019-01-28 Mon 13:30]
*** Testing the helpers.R script for a chloropleth map

#+BEGIN_SRC R :session *R:shiny-exploration*
library(easypackages)
libraries("maps", "mapproj")
source("./census-app-02/01_scripts/helpers.R")
counties  <- read_rds("./census-app-02/00_data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
#+END_SRC

#+RESULTS:
| 0.21281857787809 | 0.19002668659856 | -0.401840098661777 | 0.520483137251405 | -0.344832092682208 | 0.466189798223245 |
| 0.21281857787809 | 0.19002668659856 | -0.401840098661777 | 0.520483137251405 | -0.344832092682208 | 0.439043128709165 |
| 0.21281857787809 | 0.19002668659856 | -0.401840098661777 | 0.520483137251405 | -0.344832092682208 | 0.411896459195085 |
| 0.21281857787809 | 0.19002668659856 | -0.401840098661777 | 0.520483137251405 | -0.344832092682208 | 0.384749789681005 |
| 0.21281857787809 | 0.19002668659856 | -0.401840098661777 | 0.520483137251405 | -0.344832092682208 | 0.357603120166925 |

*** Setting up chloropleth output in shiny app
:PROPERTIES:
:ID:       1FA6CA17-DE9A-475B-A0DD-8F6457A3A434
:END:
Using the dataset =counties.rds= collected with the =Uscensus2010= R package. [[http://shiny.rstudio.com/tutorial/written-tutorial/lesson5/census-app/data/counties.rds][Download link]].

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle census-app-02/app.R
library("easypackages")
libraries("shiny", "dplyr", "stringr", "readr", "maps", "mapproj")


## Reading the counties dataset and glimpsing
source("helpers.R")
counties <- read_rds("./00_data/counties.rds")
counties %>% glimpse()

## Define UI
ui  <- fluidPage(
  titlePanel("censusViz"),

  sidebarLayout(
    sidebarPanel(
      helpText("Create demographic maps with information form the 2010 US Census"),
      selectInput("inputbox1",
                  h2("Choose variable to display:"),
                  choices = list("Percent White" ,
                                 "Percent Black",
                                 "Percent Hispanic",
                                 "Percent Asian"
                                ),
                  selected = ""
                  ),
      sliderInput("slider1",
                  h2("Range of interest:"),
                  min = 0,
                  max = 100,
                  value = c(0,100)
                  )
    ),
    mainPanel(h1("Reactive Output"),
              textOutput("selected_var"),
              textOutput("slider_range"),
              plotOutput("map")
              )
  )
)

## Define server logic
server <- function(input, output){

  output$selected_var <- renderText({
    str_glue("Selected option is {input$inputbox1} ")
  })

  output$slider_range <- renderText({
    str_glue("Range selected from \n {input$slider1[1]} to {input$slider1[2]}")
  })

  output$map  <- renderPlot({

    arg_list  <-  switch(input$inputbox1,
                         "Percent White" = list(counties$white, "darkgreen","% White population"),
                         "Percent Black" = list(counties$black, "black","% Black population"),
                         "Percent Asian" = list(counties$asian, "darkorange","% Asian population"),
                         "Percent Hispanic" = list(counties$hispanic, "pink","% Hispanic population"),
                         )

    arg_list$max = input$slider1[2]
    arg_list$min = input$slider1[1]

    do.call(percent_map,arg_list)

  })
}



## Run the app
shinyApp(ui = ui, server = server)


#+END_SRC

** TODO Lesson 6: stockVis app

* Recreating in-built Shiny examples [2/3]
:PROPERTIES:
:CREATED:  <2019-01-29 Tue 07:19>
:END:
** DONE Eg 1 Hello Shiny. [[/hello-shiny/][See hello-shiny]]
CLOSED: [2019-02-05 Tue 12:14]
:PROPERTIES:
:ID:       23E27D04-B45B-440D-A4AE-7ADEA48EA250
:END:

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle ./hello-shiny/app.R
library(shiny)

## Define UI
ui  <- fluidPage(
  titlePanel("Hello Shiny"),

  sidebarLayout(
    sidebarPanel(
      sliderInput("slider1",
                  label = "Number of Bins",
                  min = 1,
                  max = 50,
                  value = 20
                  )
    ),
      mainPanel("",
                plotOutput("histplot")
                )
  )
)


## Define server logic

server <- function(input, output){

  output$histplot <- renderPlot({

    dataset <- faithful$waiting
    bins <- seq(min(dataset), max(dataset), length.out = input$slider1 +1)

    hist(dataset, breaks = bins, col = "blue", border = "white",
         xlab = "Waiting time to next eruption(mins)",
         main = "Histogram of waiting times"
         )
  })

}

## Run the app
shinyApp(ui = ui, server = server)
#+END_SRC

** DONE Eg 2 Shiny text. [[/shiny-text-eg2/][See shiny-text-eg2]]
CLOSED: [2019-01-29 Tue 08:21]
:PROPERTIES:
:ID:       6E0E8862-4096-441A-81C0-DFEBF5957F62
:END:

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle ./shiny-text-eg2/app.R
library(shiny)
library(tidyverse)

## Define UI
ui  <- fluidPage(
  titlePanel("Shiny text"),

  sidebarLayout(
    sidebarPanel(
      selectInput("dataset_choice",
                  label = "Choose a dataset",
                  choices = c("rock", "diamonds", "cars"),
                  #value = ""
                  ),
      numericInput("observation_number",
                   label = "Choose number of observations to display",
                   value = 10
                   )
    ),
    mainPanel(

      verbatimTextOutput("summary"),

      tableOutput("view")
    )
  )
)


## Define server logic

server <- function(input, output){

  datasetInput <- reactive({
    switch(input$dataset_choice,
           "rock" = rock,
           "diamonds"  = diamonds,
           "cars"   = cars
           )
  })

  output$summary <- renderPrint({
    datasetInput() %>% summary()
  })

  output$view <- renderTable({
    datasetInput() %>% head(n = input$observation_number)
  })
}



## Run the app
shinyApp(ui = ui, server = server)
#+END_SRC
*** DONE Base Example

** TODO Eg 6 - tabsets. [[/tabsets-eg-6/][See tabsets-eg-6]]
:PROPERTIES:
:ID:       BD21A308-00FB-4E3B-B1D9-4B44DA6BBB39
:END:

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle ./tabsets-eg-6/app.R
library(shiny)
library(shinythemes)

## Define UI
ui  <- fluidPage(
  themeSelector(),
  titlePanel("Using tabsets"),

  sidebarLayout(
    sidebarPanel(
      radioButtons("dist_type",
                   "Distribution type",
                   choices = c("Normal" = "norm",
                               "Uniform" = "unif",
                               "Log-normal" = "lnorm",
                               "Exponential" = "exp"
                               )
                   ),
      sliderInput("slider1",
                  label = "Number of observations",
                  min = 1,
                  max = 1000,
                  value = 500
                  )
    ),

    mainPanel(

      tabsetPanel(type = "tabs",
                  tabPanel(title = "Plot", plotOutput("plot1")),
                  tabPanel(title = "Summary", verbatimTextOutput("vbto1_summary")),
                  tabPanel(title = "Table", tableOutput("tabl1"))
                  )
    )
  )
)


## Define server logic

server <- function(input, output){
  d <- reactive({
    dist <- switch(input$dist_type,
           norm = rnorm,
           unif = runif,
           lnorm = rlnorm,
           exp = exp
#           rnorm
           )

    dist(input$slider1)
  })

  output$plot1 <- renderPlot({
    dist <- input$dist_type
    n <- input$slider1

    hist(d(),
         main = paste("r", dist, "(", n, ")", sep = ""),
         col = "blue", border = "white")
  })

  output$vbto1_summary <- renderText({
    summary(d())
  })

  output$tabl1 <- renderTable({
    d()
  })
}

## Run the app
shinyApp(ui = ui, server = server)

#+END_SRC

* Dataset exploration app [0/1]
** Switching to dashboard library
*** Loading libraries
:PROPERTIES:
:ID:       A239437B-4196-4E38-9EB6-32989678AD1A
:END:
#+BEGIN_SRC R :tangle ./dataset-explorer/ds/app.R :session *R:shiny-exploration*
# Loading Libraries
library("easypackages")
libraries("tidyverse", "tidyquant", "readxl", "shiny", "shinydashboard", "ISLR", "MASS")
#+END_SRC

#+RESULTS:

*** UI
**** header
:PROPERTIES:
:ID:       22AFAA49-31D3-41F0-AB8C-22F19E656AD4
:END:
#+BEGIN_SRC R :session *R:shiny-exploration* :tangle ./dataset-explorer/ds/app.R
header <- dashboardHeader(title= "R Data set explorer")
#+END_SRC

#+RESULTS:

**** sidebar
:PROPERTIES:
:ID:       EC86BD50-D3CB-42AE-A6E7-4C6B70F1F1A5
:END:
#+BEGIN_SRC R  :tangle ./dataset-explorer/ds/app.R :session *R:shiny-exploration*
sidebar <- dashboardSidebar(
    sidebarMenu(
      menuItem("In-built data sets",
               tabName = "inbuilt_datasets",
               icon = icon("dashboard")
               ),
      menuItem("Rdatasets",
               tabName = "rdatasets",
               icon = icon("dashboard")
               )
    )
)
#+END_SRC

#+RESULTS:

**** body
:PROPERTIES:
:ID:       B5C91572-8382-45DC-92C6-28BF69EB95BC
:END:
#+BEGIN_SRC  R :tangle ./dataset-explorer/ds/app.R :session *R:shiny-exploration*
body <- dashboardBody(
  tabItems(
    tabItem(
      tabName = "inbuilt_datasets",
      fluidRow(

        box(title = "Input",
            selectInput("dataset",
                        label = "Select Dataset",
                        choices = c(ls("package:datasets") ,
                                    data(package = "MASS")$results %>% as.tibble %>% .$Title
                                    )
                        )
           ),

        box(title = "Summary",
            verbatimTextOutput("summary"),
            fluidRow(
              box(
                title = "Data Glimpse",
                verbatimTextOutput("glimpse")
              )
            )
        )
      )
      )
     ),
  tabItem(
    tabName = "rdatasets",
    h2("Rdatasets"),
    fluidRow(

      box(title = "Input",
          selectInput("rdataset",
                      label = "Select from RDatasets",
                      choices = data(package = "MASS")$results %>% as.tibble %>% .$Title
                        ),

      box(title = "Summary",
            verbatimTextOutput("summary_rdatasets"),
            fluidRow(
              box(
            title = "Data Glimpse"),
          verbatimTextOutput("glimpse_rdatasets")
          )
          )
    )
  )
  )
)
#+END_SRC

#+RESULTS:

**** Assigning UI
:PROPERTIES:
:ID:       165061AC-1BCA-4199-9751-F83DBE3A2A64
:END:
#+BEGIN_SRC R :session *R:shiny-exploration* :tangle ./dataset-explorer/ds/app.R
ui  <- dashboardPage(header, sidebar, body)
#+END_SRC

#+RESULTS:

*** Server
:PROPERTIES:
:ID:       326AB9C9-8310-4B0C-BA39-3424A3006545
:END:

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle ./dataset-explorer/ds/app.R
## Define server logic

server <- function(input, output){

  output$summary = renderPrint({
    dataset <- get(input$dataset, "package:datasets", inherits = FALSE)
    summary(dataset)
  })

  ## output$table = renderTable({
  ##   dataset <- get(input$dataset, "package:datasets", inherits = FALSE)
  ##   dataset
  ## })

  output$glimpse = renderPrint({
    dataset <- get(input$dataset, "package:datasets", inherits = FALSE)
    glimpse(dataset)
  })

}
#+END_SRC

#+RESULTS:

*** App
:PROPERTIES:
:ID:       5E285D47-8A5E-4877-95D1-6FEB83ECABE4
:END:

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle ./dataset-explorer/ds/app.R
## Run the app
shinyApp(ui = ui, server = server)
#+END_SRC

** Simple Layout - In built R Data Explorer
:PROPERTIES:
:ID:       C4C79F90-C98D-43B2-931F-5FB8B570BDD4
:END:
- Note taken on [2019-02-05 Tue 09:20] \\
  Appears that the sidepanel and mainpanel concepts cannot be used with =fluidRow()= as subcomponents. Instead, it is possible to use only =fluidRow()= to partition the page, and use it to create individual rows within a column. Perhaps this is more flexible in the long run.

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle ./dataset-explorer/app.R
library("easypackages")
libraries("shiny", "tidyverse")

## Define UI
ui  <- fluidPage(
    titlePanel("R's in-built Database explorer"),

  fluidRow(
    column(2,
           "Input",
           selectInput("dataset",
                       label = "Select Dataset",
                       choices = ls("package:datasets")
                       )
           ),
    column(10,
           verbatimTextOutput("summary"),
           fluidRow(
             verbatimTextOutput("glimpse")
                         ))
    )
)

## Define server logic

server <- function(input, output){

  output$summary = renderPrint({
    dataset <- get(input$dataset, "package:datasets", inherits = FALSE)
    summary(dataset)
  })

  output$table = renderTable({
    dataset <- get(input$dataset, "package:datasets", inherits = FALSE)
    dataset
  })

  output$glimpse = renderPrint({
    dataset <- get(input$dataset, "package:datasets", inherits = FALSE)
    glimpse(dataset)
  })

}

## Run the app
shinyApp(ui = ui, server = server)

#+END_SRC

** TODO Shiny app around Rdatasets
*** Introduction
*** Resources and References
1. [[https://stackoverflow.com/questions/33797666/how-do-i-get-a-list-of-built-in-data-sets-in-r][SO Discusion: List of in-built datasets in R]]
***
* Shiny Dashboard init
** References and notes
1. Rstudio documentation, getting started with Shiny Dashboard [[https://rstudio.github.io/shinydashboard/get_started.html][link]]
2. [[https://shiny.rstudio.com/articles/dashboards.html][There are 2 types of packages]] available to create dashboards flexdashboard and shiny dashboard.
** Installing shiny dashboard

#+BEGIN_SRC R :session *R:shiny-exploration*
install.packages("shinydashboard")
#+END_SRC

** Basic app -- Init. [[/dashboard-01/][See dashboard-01]]
:PROPERTIES:
:ID:       1b87facf-ff4e-4246-837b-545fbb0260b1
:END:

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle ./dashboard-01/app.R
library("easypackages")
libraries("shiny","shinydashboard", "tidyverse")

## Define UI
ui  <- dashboardPage(
  ## Inserting the 3 components: header, sidebar, body

  dashboardHeader(title = "Basic Dashboard"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Dashboard",
               tabName = "dashboard",
               icon = icon("dashboard")),
      menuItem("Widgets",
               tabName = "widgets",
               icon = icon("th")
               )
    )
  ),
  dashboardBody(
    ## Adding a fluidRow with boxes for plot and slider input
    tabItems(
      tabItem(
        tabName = "dashboard",
        fluidRow(

          box(plotOutput(
            "plot1",
            height = 250
          )),

          box(
            title = "Controls",
            sliderInput("slider1",
                        "Number of observations",
                        min = 1,
                        max = 100,
                        value = 50)
          )
        )
      ),

      tabItem(tabName = "widgets",
              h2("Widgets tab")
              )
    )
  )
)

## Define server logic

server <- function(input, output){
  set.seed(120)
  histdata <- rnorm(1000)

  output$plot1 <- renderPlot({
    data <- histdata[seq_len(input$slider1)]
    hist(data)
  })

}

## Run the app
shinyApp(ui = ui, server = server)

#+END_SRC

** Notes on the structure of a dashboard: [[https://rstudio.github.io/shinydashboard/structure.html][Rstudio documentation link]]
*** Main components : header, sidebar, body -> defined for =dashboardPage()=
These can be split up into separate variables and fed into the dashboardPage function. This is useful in the case of complex or long programs.

#+BEGIN_SRC R
header  <- dashboardHeader()  # Defining the content of each function into a variable
sidebar  <- dashboardSiderbar()
body  <- dashboardBody()

dashboardPage(header, sidebar, body)
#+END_SRC

**** Header

This will contain the dropdownMenu() items of different types. The types could  could be messages or notifications etc.

** Experimenting with structures

Incorporating elements from the structures overview in Rstudio's documentation ([[https://rstudio.github.io/shinydashboard/structure.html][link]]).

*** Dropdown menu items (static) : messages, tasks, notifications
:PROPERTIES:
:ID:       961DB746-CE19-43B2-BA98-EE1F8CD5F76E
:END:

#+BEGIN_SRC R :session *R:shiny-exploration* :tangle ./dashboard-01/app.R
library("easypackages")
libraries("shiny","shinydashboard", "tidyverse")

## Define UI
ui  <- dashboardPage(
  ## Inserting the 3 components: header, sidebar, body

  dashboardHeader(title = "Basic Dashboard",
                  ##Experimenting with static dropdown menu message items.
                  dropdownMenu(
                    type = "messages",
                    ## Message items require a 'from' and 'message' argument
                    messageItem(
                      from = "Sales Dept",
                      message = "Sales are steady."
                    ),
                    messageItem(
                      from = "Shop Floor",
                      message = "Job XXX is done"
                    )
                  ),
                  ## Adding static tasks items in dropdown menu
                  dropdownMenu(type = "tasks",
                               taskItem(value = 37,
                                        ## The value denotes the percentage completion
                                        color = "red",
                                        "Test Project 1"
                                        ),
                               taskItem(value = 50,
                                        color = "blue",
                                        "Test Project 2"
                                        )
                               ),

                  dropdownMenu(type = "notifications",
                               notificationItem(
                                 text = "Blah Blah Today is cold",
                                 icon("users")
                               ),
                               notificationItem(
                                 text = "Another notification",
                                 icon("truck"),
                                 status = "success"
                               ),
                               notificationItem(
                                 text = "3rd notification",
                                 icon("exclamation-triangle"),
                                 status = "warning"
                               )
                               )
                  ),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Dashboard",
               tabName = "dashboard",
               icon = icon("dashboard")),
      menuItem("Widgets",
               tabName = "widgets",
               icon = icon("th")
               )
    )
  ),
  dashboardBody(
    ## Adding a fluidRow with boxes for plot and slider input
    ## Assigning the tab to the tab names and populating individual content
    tabItems(
      tabItem(
        tabName = "dashboard",
        fluidRow(
          ## Note that the objects are encapsulated within a box
          box(plotOutput(
            "plot1",
            height = 250
          )),

          box(
            title = "Controls",
            sliderInput("slider1",
                        "Number of observations",
                        min = 1,
                        max = 100,
                        value = 50)
          )
        )
      ),

      tabItem(tabName = "widgets",
              h2("Widgets tab")
              )
    )
  )
)

## Define server logic

server <- function(input, output){
  set.seed(120)
  histdata <- rnorm(1000)

  output$plot1 <- renderPlot({
    data <- histdata[seq_len(input$slider1)]
    hist(data)
  })

}

## Run the app
shinyApp(ui = ui, server = server)

#+END_SRC

*** TODO Dropdown menu for messages with Dynamic message items

* TODO Sales revenue app - Shiny dashboard
** Reference [[https://datascienceplus.com/building-a-simple-sales-revenue-dashboard-with-r-shiny-shinydashboard/][link]]
** replicating the code
- Note taken on [2019-02-06 Wed 10:17] \\


*** Loading libraries
:PROPERTIES:
:ID:       DEC2DB7B-7CDD-4BCF-930B-36EC56FEDBE3
:END:
#+BEGIN_SRC R :mkdirp yes :tangle ./sales-rev-app/app.R :session *R:shiny-exploration*
library("easypackages")
libraries("shiny", "shinydashboard", "tidyverse")
#+END_SRC

*** Downloading raw csv and loading into variable
:PROPERTIES:
:ID:       30D7D799-000D-451E-B315-E50150492695
:END:

#+BEGIN_SRC R :mkdirp yes :tangle ./sales-rev-app/app.R :session *R:shiny-exploration*
## Download file to specific location
system("wget \"https://raw.githubusercontent.com/amrrs/sample_revenue_dashboard_shiny/master/recommendation.csv\" -P ./sales-rev-app/")

#+END_SRC

Reading in the csv file

#+BEGIN_SRC R :mkdirp yes :tangle ./sales-rev-app/app.R :session *R:shiny-exploration*
recommendation_raw  <- read.csv("./sales-rev-app/recommendation.csv", stringsAsFactors = FALSE, header = TRUE)
#+END_SRC

#+RESULTS:
| Axis Bank    | FBB  | North |  2000 |
| HSBC         | FBB  | South | 30000 |
| SBI          | FBB  | East  |  1000 |
| ICICI        | FBB  | West  |  1000 |
| Bandhan Bank | FBB  | West  |   200 |
| Axis Bank    | SIMO | North |   200 |
| HSBC         | SIMO | South |   300 |
| SBI          | SIMO | East  |   100 |
| ICICI        | SIMO | West  |   100 |
| Bandhan Bank | SIMO | West  |   200 |

*** Init dashboard
:PROPERTIES:
:ID:       c4cc69be-7be8-40d9-86ed-aac4dde8d5f0
:END:


#+BEGIN_SRC R :mkdirp yes :tangle ./sales-rev-app/app.R :session *R:shiny-exploration*
## Defining individual components

## header
header <- dashboardHeader(title = "Sales Revenue Dashboard")

## sidebar contents
sidebar <-
  dashboardSidebar(
    sidebarMenu(
      menuItem("Dashboard",
               icon = icon("dashboard"),
               tabName = "dashboard"
               ),
      menuItem("Visit us",
               icon = icon("send", lib = 'glyphicon'),
               href = "https://shrysr.github.io"
               )
    )
  )

## Defining individual rows
frow1 <- fluidRow(
  box(
    valueBoxOutput("value1"),
    valueBoxOutput("value2"),
    valueBoxOutput("value3")

  )
)

frow2 <- fluidRow(
  box(
    title = "Revenue per account",
    status = "primary",
    solidHeader = TRUE,
    collapsible = TRUE,
    plotOutput("revenuebyacct", height = "300px")
  )
)

## combining the defined fluid rows into the dashboard body
body <- dashboardBody(frow1, frow2)

## Defining UI
ui <- dashboardPage(title = "test title", header,sidebar, body)

#+END_SRC

#+BEGIN_SRC R :mkdirp yes :tangle ./sales-rev-app/app.R :session *R:shiny-exploration*
## Define server logic

server <- function(input, output){
  ## Data manipulation
  total_revenue <- sum(recommendation_raw$revenue)
  sales_account <-
    recommendation_raw %>%
    group_by(Account) %>%
    summarise(value = sum(Revenue)) %>%
    filter(value == max(value))

  prof_prod <-
    recommendation_raw %>%
    group_by(Product) %>%
    summarise(value = sum(Revenue)) %>%
    filter(value == max(value))

  ## Creating valuebox output
  output$value1 <- renderValueBox ({
    valueBox(
      formatC(sales_account$value, format = "d", big.mark= ','),
      paste('Top Account: ', sales_account$Account),
      icon = icon("stats", lib ='glyphicon'),
      color = "purple"
    )
  })

  output$value2 <- renderValueBox({
    valueBox(
      formatC(total_revenue, format = "d", big.mark = ','),
      paste('Top Account: ', sales_account$Account),
      icon = icon("gbp", lib = 'glyphicon'),
      color = "green"
    )
  })

  output$value3 <- renderValueBox({
    valueBox(
      formatC(total_revenue, format = "d", big.mark = ','),
      paste("Top Product: ", prof_prod$Product),
      icon = icon("menu-hamburger", lib = 'glyphicon'),
      color = "yellow"
    )
  })

}

#+END_SRC

#+BEGIN_SRC R :mkdirp yes :tangle ./sales-rev-app/app.R :session *R:shiny-exploration*
## Run the app
shinyApp(ui = ui, server = server)

#+END_SRC
